// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package org.apache.openwhisk.grpc

/** #messages
  * The request message
  *
  * @param lastDuration
  *   This allows optional value
  * @param alive
  *   to record alive containers
  */
@SerialVersionUID(0L)
final case class FetchRequest(
    transactionId: _root_.scala.Predef.String = "",
    invocationNamespace: _root_.scala.Predef.String = "",
    fqn: _root_.scala.Predef.String = "",
    rev: _root_.scala.Predef.String = "",
    containerId: _root_.scala.Predef.String = "",
    warmed: _root_.scala.Boolean = false,
    lastDuration: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None,
    alive: _root_.scala.Boolean = false,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[FetchRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = transactionId
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = invocationNamespace
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = fqn
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = rev
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = containerId
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      
      {
        val __value = warmed
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(6, __value)
        }
      };
      if (lastDuration.isDefined) {
        val __value = org.apache.openwhisk.grpc.FetchRequest._typemapper_lastDuration.toBase(lastDuration.get)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = alive
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(8, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = transactionId
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = invocationNamespace
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = fqn
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = rev
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = containerId
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = warmed
        if (__v != false) {
          _output__.writeBool(6, __v)
        }
      };
      lastDuration.foreach { __v =>
        val __m = org.apache.openwhisk.grpc.FetchRequest._typemapper_lastDuration.toBase(__v)
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = alive
        if (__v != false) {
          _output__.writeBool(8, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withTransactionId(__v: _root_.scala.Predef.String): FetchRequest = copy(transactionId = __v)
    def withInvocationNamespace(__v: _root_.scala.Predef.String): FetchRequest = copy(invocationNamespace = __v)
    def withFqn(__v: _root_.scala.Predef.String): FetchRequest = copy(fqn = __v)
    def withRev(__v: _root_.scala.Predef.String): FetchRequest = copy(rev = __v)
    def withContainerId(__v: _root_.scala.Predef.String): FetchRequest = copy(containerId = __v)
    def withWarmed(__v: _root_.scala.Boolean): FetchRequest = copy(warmed = __v)
    def getLastDuration: _root_.scala.Long = lastDuration.getOrElse(org.apache.openwhisk.grpc.FetchRequest._typemapper_lastDuration.toCustom(com.google.protobuf.wrappers.Int64Value.defaultInstance))
    def clearLastDuration: FetchRequest = copy(lastDuration = _root_.scala.None)
    def withLastDuration(__v: _root_.scala.Long): FetchRequest = copy(lastDuration = Option(__v))
    def withAlive(__v: _root_.scala.Boolean): FetchRequest = copy(alive = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = transactionId
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = invocationNamespace
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = fqn
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = rev
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = containerId
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = warmed
          if (__t != false) __t else null
        }
        case 7 => lastDuration.map(org.apache.openwhisk.grpc.FetchRequest._typemapper_lastDuration.toBase).orNull
        case 8 => {
          val __t = alive
          if (__t != false) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(transactionId)
        case 2 => _root_.scalapb.descriptors.PString(invocationNamespace)
        case 3 => _root_.scalapb.descriptors.PString(fqn)
        case 4 => _root_.scalapb.descriptors.PString(rev)
        case 5 => _root_.scalapb.descriptors.PString(containerId)
        case 6 => _root_.scalapb.descriptors.PBoolean(warmed)
        case 7 => lastDuration.map(org.apache.openwhisk.grpc.FetchRequest._typemapper_lastDuration.toBase(_).toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => _root_.scalapb.descriptors.PBoolean(alive)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.apache.openwhisk.grpc.FetchRequest
}

object FetchRequest extends scalapb.GeneratedMessageCompanion[org.apache.openwhisk.grpc.FetchRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.apache.openwhisk.grpc.FetchRequest] = this
  def merge(`_message__`: org.apache.openwhisk.grpc.FetchRequest, `_input__`: _root_.com.google.protobuf.CodedInputStream): org.apache.openwhisk.grpc.FetchRequest = {
    var __transactionId = `_message__`.transactionId
    var __invocationNamespace = `_message__`.invocationNamespace
    var __fqn = `_message__`.fqn
    var __rev = `_message__`.rev
    var __containerId = `_message__`.containerId
    var __warmed = `_message__`.warmed
    var __lastDuration = `_message__`.lastDuration
    var __alive = `_message__`.alive
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __transactionId = _input__.readStringRequireUtf8()
        case 18 =>
          __invocationNamespace = _input__.readStringRequireUtf8()
        case 26 =>
          __fqn = _input__.readStringRequireUtf8()
        case 34 =>
          __rev = _input__.readStringRequireUtf8()
        case 42 =>
          __containerId = _input__.readStringRequireUtf8()
        case 48 =>
          __warmed = _input__.readBool()
        case 58 =>
          __lastDuration = Option(org.apache.openwhisk.grpc.FetchRequest._typemapper_lastDuration.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, __lastDuration.map(org.apache.openwhisk.grpc.FetchRequest._typemapper_lastDuration.toBase).getOrElse(com.google.protobuf.wrappers.Int64Value.defaultInstance))))
        case 64 =>
          __alive = _input__.readBool()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    org.apache.openwhisk.grpc.FetchRequest(
        transactionId = __transactionId,
        invocationNamespace = __invocationNamespace,
        fqn = __fqn,
        rev = __rev,
        containerId = __containerId,
        warmed = __warmed,
        lastDuration = __lastDuration,
        alive = __alive,
        unknownFields = if (_unknownFields__ == null) _message__.unknownFields else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.apache.openwhisk.grpc.FetchRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.apache.openwhisk.grpc.FetchRequest(
        transactionId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        invocationNamespace = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        fqn = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        rev = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        containerId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        warmed = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        lastDuration = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.wrappers.Int64Value]]).map(org.apache.openwhisk.grpc.FetchRequest._typemapper_lastDuration.toCustom),
        alive = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ActivationProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ActivationProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 7 => __out = com.google.protobuf.wrappers.Int64Value
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.apache.openwhisk.grpc.FetchRequest(
    transactionId = "",
    invocationNamespace = "",
    fqn = "",
    rev = "",
    containerId = "",
    warmed = false,
    lastDuration = _root_.scala.None,
    alive = false
  )
  implicit class FetchRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.apache.openwhisk.grpc.FetchRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.apache.openwhisk.grpc.FetchRequest](_l) {
    def transactionId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.transactionId)((c_, f_) => c_.copy(transactionId = f_))
    def invocationNamespace: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.invocationNamespace)((c_, f_) => c_.copy(invocationNamespace = f_))
    def fqn: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.fqn)((c_, f_) => c_.copy(fqn = f_))
    def rev: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.rev)((c_, f_) => c_.copy(rev = f_))
    def containerId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.containerId)((c_, f_) => c_.copy(containerId = f_))
    def warmed: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.warmed)((c_, f_) => c_.copy(warmed = f_))
    def lastDuration: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getLastDuration)((c_, f_) => c_.copy(lastDuration = Option(f_)))
    def optionalLastDuration: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Long]] = field(_.lastDuration)((c_, f_) => c_.copy(lastDuration = f_))
    def alive: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.alive)((c_, f_) => c_.copy(alive = f_))
  }
  final val TRANSACTIONID_FIELD_NUMBER = 1
  final val INVOCATIONNAMESPACE_FIELD_NUMBER = 2
  final val FQN_FIELD_NUMBER = 3
  final val REV_FIELD_NUMBER = 4
  final val CONTAINERID_FIELD_NUMBER = 5
  final val WARMED_FIELD_NUMBER = 6
  final val LASTDURATION_FIELD_NUMBER = 7
  final val ALIVE_FIELD_NUMBER = 8
  @transient
  private val _typemapper_lastDuration: _root_.scalapb.TypeMapper[com.google.protobuf.wrappers.Int64Value, _root_.scala.Long] = implicitly[_root_.scalapb.TypeMapper[com.google.protobuf.wrappers.Int64Value, _root_.scala.Long]]
  def of(
    transactionId: _root_.scala.Predef.String,
    invocationNamespace: _root_.scala.Predef.String,
    fqn: _root_.scala.Predef.String,
    rev: _root_.scala.Predef.String,
    containerId: _root_.scala.Predef.String,
    warmed: _root_.scala.Boolean,
    lastDuration: _root_.scala.Option[_root_.scala.Long],
    alive: _root_.scala.Boolean
  ): _root_.org.apache.openwhisk.grpc.FetchRequest = _root_.org.apache.openwhisk.grpc.FetchRequest(
    transactionId,
    invocationNamespace,
    fqn,
    rev,
    containerId,
    warmed,
    lastDuration,
    alive
  )
}
